#GET THE PARTY STARTED WITH DATA AND LIBRARIES
setwd("D:/jmcmurry/Documents/Davis_data/combined/txt")
list.files()
library("stringr")
library("MSstats")
allpeps = read.csv("modificationSpecificPeptides.txt", sep = "\t", row.names = "id")

#BASIC FILTERING OF THE DATA FOR QUALITY AND THE LIKE
T.Count = str_count(allpeps$Sequence, "T")
allpeps = cbind(T.Count, allpeps)
names(allpeps)[1] = "T.Count"
#allpeps = allpeps[allpeps$Missed.cleavages == 0,]
allpeps = allpeps[allpeps$Reverse != "+",]
allpeps = allpeps[allpeps$Potential.contaminant != "+",]
#allpeps = allpeps[allpeps$T.Count == 1,]                      #limiting search to T.count == 1 cuts # of F-peps down to 500 from 900.
allpeps = allpeps[allpeps$PEP <0.01,]						#a less stringent PEP will give ~20% more IDs and ~15% more proteins
allpeps = allpeps[allpeps$Unique..Proteins. == "yes",]
delp0564means =rowMeans(allpeps[,c(40,43,44,45)])
allpeps = allpeps[ delp0564means > 0 & is.na(delp0564means) == FALSE ,]

#allowing multiply modified peptides will barely increase the # of IDs and would complicate thinking about things.
Fpeps = allpeps[allpeps$Modifications == "Fluorothreonine",] #"Fluorothreonine;Oxidation (M)" | allpeps$Modifications == "Fluorothreonine" | allpeps$Modifications == "Acetyl (Protein N-term);Oxidation (M)",]
Tpeps = allpeps[allpeps$Modifications == "Unmodified",]

#qualitative analysis
#I from the second plot, it does not seem, qualitatively, that the proteins with
#no fluorothreonine intensity differ appreciably in T inten
mergedPeps = merge(Tpeps, Fpeps, by = "Sequence")# all=TRUE) #all=TRUE
mergedPeps[is.na(mergedPeps)] = 0
Tmean = rowMeans(mergedPeps[,c(40,43,44,45)])
Fmean = rowMeans(mergedPeps[,c(95,98,99,100)])
plot(Tmean, Fmean, pch = 16, cex = 0.5, log= "xy")
plot(Tmean,Fmean/(Fmean+Tmean),pch=16, cex=0.5, log="x")

#look at the distribution of Tmean and Fmean
plot(density(log(Tmean, base=10)), lwd=2, xlim=c(5,10))
points(density(log(Fmean, base=10)), col = 2, lwd=2, type = "l")
summary((Fmean/(Fmean+Tmean)), na.rm = TRUE)


#USE ONLY PEPTIDES THAT MATCH 
intersect_names = intersect(Tpeps$Sequence, Fpeps$Sequence)
Fpeps = Fpeps[Fpeps$Sequence %in% intersect_names,]
Tpeps = Tpeps[Tpeps$Sequence %in% intersect_names,]



#pull out data frame for the whole shebang and stack upon one another
temp = NULL
for( i in c(40,43,44,45)) {
ProteinName             = Fpeps$Proteins
PeptideSequence         = Fpeps$Sequence
Intensity               = Fpeps[,i]
PrecursorCharge         = rep(2, length(Fpeps[,i]))
FragmentIon             = rep(NA, length(Fpeps[,i]))
ProductCharge           = rep(NA, length(Fpeps[,i]))
IsotopeLabelType        = rep("L", length(Fpeps[,i]))
Run                     = rep(names(Fpeps)[i], length(Fpeps[,i]))
BioReplicate            = rep(names(Fpeps)[i], length(Fpeps[,i]))
Condition               = rep("Fluorothreonine", length(Fpeps[,i]))
temp                    = rbind(temp, 
                                data.frame(ProteinName, PeptideSequence, 
                                           PrecursorCharge, FragmentIon, 
                                           ProductCharge, IsotopeLabelType, 
                                           Condition, BioReplicate, 
                                           Run, Intensity))
}
for( i in c(40,43,44,45)) {
ProteinName       = Tpeps$Proteins
PeptideSequence   = Tpeps$Sequence
Intensity         = Tpeps[,i] +1
PrecursorCharge   = rep(2, length(Tpeps[,i]))
FragmentIon       = rep(NA, length(Tpeps[,i]))
ProductCharge     = rep(NA, length(Tpeps[,i]))
IsotopeLabelType  = rep("L", length(Tpeps[,i]))
Run               = rep(names(Tpeps)[i], length(Tpeps[,i]))
BioReplicate      = rep(names(Tpeps)[i], length(Tpeps[,i]))
Condition         = rep("Threonine", length(Tpeps[,i]))
temp              = rbind(temp, 
                          data.frame(ProteinName, PeptideSequence, 
                                     PrecursorCharge, FragmentIon, 
                                     ProductCharge, IsotopeLabelType, 
                                     Condition, BioReplicate, 
                                     Run, Intensity))
}

plot(rowMeans(temp[temp$Condition == "Threonine",]

stuff = dataProcess(raw=temp, censoredInt=0, MBimpute=TRUE)
comparison1 = matrix(c(1,-1), nrow=1)
row.names(comparison1) = "AA"
stuffcompare =  groupComparison(contrast.matrix = comparison1, data=stuff)
stuffcompare$ComparisonResult
stuffcompare$ComparisonResult[stuffcompare$ComparisonResult$pvalue <0.05,]
groupComparisonPlots(stuffcompare$ComparisonResult, type = 'VolcanoPlot')
#Fpeps = Fpeps[,c(2, 30, 38, 40,43,44,45, 56)]

temp2 = merge(Fpeps, Tpeps, by = "Sequence")
ratiomat = temp2[,c(40,43,44,45)]/(temp2[,c(95,98,99,100)]+temp2[,c(40,43,44,45)])













###########################################
#crap and functions for qual analysis
sum(table(Fpeps$Proteins)>0)

     my.t.test.p.value <- function(...) {
    obj<-try(t.test(...), silent=TRUE)
    if (is(obj, "try-error")) return(NA) else return(obj$p.value)
}
counts$fdr <- p.adjust(counts$p_value, method = "fdr") 


#Tpeps = allpeps[allpeps$Modifications == "Oxidation (M)" | allpeps$Modifications == "Unmodified" | allpeps$Modifications == "Acetyl (Protein N-term)",]
#Tpeps = allpeps[allpeps$Modifications == "Unmodified",]
#Tpeps = Tpeps[,c(2, 7, 8, 30, 49, 54, 38, 40,43,44,45, 56)




combined = rbind(Fpeps, Tpeps)




#there are some non-unique proteins in here.  Also, how to deal with proteins that have multi-peptides?
#also, need to fill Nas as zeros
comparison = merge(Tpeps, Fpeps, by = "Sequence") #all = TRUE
#cut it off so I need at least one F-count and one T-count to compare. Should I do this?  Maybe split the non-measured group off and look at it separately?  
#compare:  allpeps, noFmeasured, lotsof F measured, lessF measured.
comparison = comparison[comparison$MS.MS.Count.y > 0 & is.na(comparison$MS.MS.Count.y) != TRUE ,] 
comparison = comparison[comparison$MS.MS.Count.x > 0 & is.na(comparison$MS.MS.Count.x) != TRUE,] 

row.names(comparison) = comparison$Sequence
comparison = comparison[,c(40,43,44,45,95,98,99,100)]
comparison = comparison[rowMins(as.matrix(comparison)) > 0,]
normfactors = colMedians(as.matrix(comparison))
normfactors=matrix( rep(normfactors, length(comparison[,1])), ncol=8, byrow = TRUE)

normcomparison = comparison/normfactors
pval = c()

     my.t.test.p.value <- function(...) {
    obj<-try(t.test(..., pairwise = TRUE), silent=TRUE)
    if (is(obj, "try-error")) return(NA) else return(obj$p.value)
}

for (i in 1:length(normcomparison[,1])){
pval [i] = my.t.test.p.value(normcomparison[i,1:4], normcomparison[i,5:8])
}
row.names(normcomparison)
padj = p.adjust(pval)

plot(rowMeans(comparison[,1:4]), rowMeans(comparison[,5:8])
, pch = 16, log = "xy")
siggy = comparison[pval <0.05,]
points(rowMeans(siggy[,1:4]), rowMeans(siggy[,5:8]), col =2, pch = 16)


row.names(normcomparison[pval<0.05,])
allpeps[allpeps$Sequence %in% row.names(normcomparison[pval<0.05,]),]$Proteins



logcomparison = log(comparison[,c(8:11, 15:18)])
library("matrixStats")
normfactors = colMedians(as.matrix(logcomparison))
normfactors = t(matrix(rep(median_vec,dim(logcomparison)[1]), nrow = 8))
normcomparison = comparison/normcomparison












evi = read.csv("peptides.txt", sep="\t")
T.Count = str_count(evi$Sequence, "T")
evi = cbind(T.Count, evi)
evi = evi[evi$Missed.cleavages == 0,]
evi = evi[evi$Reverse != "+",]
evi = evi[evi$Potential.contaminant != "+",]
evi = evi[evi$T.Count == 1,]                      #limiting search to T.count == 1 cuts # of F-peps down to 500 from 900.
evi = evi[allpeps$PEP <0.01,]						#a less stringent PEP will give ~20% more IDs

v= c()
evifacvec = as.numeric(evi$Experiment)
for (x in 1:length(evi$Experiment)){
i = evifacvec[x]
if (i == 3 | i == 8 | i == 4 | i == 1) { v[x] = "Fth"}
else {v[x] = "Thr"}
#if (i == 5 | i == 6 | i == 7 | i == 2) { v[x] = "WT"}
}

input = data.frame(
evi$Leading.razor.protein, 
evi$Sequence, evi$Charge, 
rep(NA, dim(evi)[1]), 
rep(NA, dim(evi)[1]), 
rep("L", dim(evi)[1]),
 v,
evi$Experiment,
evi$Experiment,
evi$Intensity)
colnames(input) = c(
"ProteinName",
 "PeptideSequence", 
 "PrecursorCharge", 
 "FragmentIon", 
 "ProductCharge", 
 "IsotopeLabelType", 
 "Condition", 
 "BioReplicate", 
 "Run", 
 "Intensity")
inproc = dataProcess(raw = input)








plot(comparison$Intensity.x, comparison$Intensity.y, pch = 16, cex=.5, log = "xy", cex.axis = 1.5)


#oK?
d=comparison
d[is.na(d)] = 0

#sick
plot(comparison$Retention.time.x, comparison$Retention.time.y,
  pch = 16, cex=.5, cex.axis = 1.5, cex.lab = 1.5,
   xlab = "Thr ret. time (min)",
   ylab = "Fth ret.time (min)")
   
======================CRAP==============================

ALTpeps = read.csv("peptides.txt", sep = "\t", row.names = "Mod..peptide.IDs" )
ALTpeps = ALTpeps[, c(1,26)]
names(ALTpeps) = c("ALTseq", "T.Count")
ALTpeps = read.csv("peptides.txt", sep = "\t", row.names = "Mod..peptide.IDs" )
ALTpeps
quantpeps = ALTpeps[altpeps$T.Count == 1,]
quantpeps = quantpeps[quantpeps$Missed.cleavages == 0,]
quantpeps = quantpeps[quantpeps$Reverse != "+",]
quantpeps = quantpeps[quantpeps$Potential.contaminant != "+",]
quantpeps = quantpeps[,c(XXXXXXXXXXXXX)]

#yo, I think the "id" in the peptides.txt is the same as the "Peptide.id" in the modificationSpecificPeptides.txt
